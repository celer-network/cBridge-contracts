{
  "address": "0x841ce48F9446C8E281D3F1444cB859b4A6D0738C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashlock",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timelock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcTransferId",
          "type": "bytes32"
        }
      ],
      "name": "LogNewTransferIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashlock",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timelock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        }
      ],
      "name": "LogNewTransferOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preimage",
          "type": "bytes32"
        }
      ],
      "name": "LogTransferConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "name": "LogTransferRefunded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_preimage",
          "type": "bytes32"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hashlock",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_timelock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_srcTransferId",
          "type": "bytes32"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hashlock",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_timelock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hashlock",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "timelock",
          "type": "uint64"
        },
        {
          "internalType": "enum CBridge.TransferStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0374ead9c6331d5858d4adf8ad70d4e0dffc42025137378172a14edeef2209fe",
  "receipt": {
    "to": null,
    "from": "0x1b9dFC56e38b0F92448659C114e2347Bd803911c",
    "contractAddress": "0x841ce48F9446C8E281D3F1444cB859b4A6D0738C",
    "transactionIndex": 5,
    "gasUsed": "916394",
    "logsBloom": "0x
    "blockHash": "0x2b55d9c651e2c91941b411e0a05ffb0394942c8886068a96ac0bcbd3b7ab8406",
    "transactionHash": "0x0374ead9c6331d5858d4adf8ad70d4e0dffc42025137378172a14edeef2209fe",
    "logs": [],
    "blockNumber": 9636223,
    "cumulativeGasUsed": "3130738",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "557275c358724af34a68d13a881e865c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timelock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcTransferId\",\"type\":\"bytes32\"}],\"name\":\"LogNewTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timelock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"}],\"name\":\"LogNewTransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preimage\",\"type\":\"bytes32\"}],\"name\":\"LogTransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"LogTransferRefunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hashlock\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_timelock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_srcTransferId\",\"type\":\"bytes32\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hashlock\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_timelock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timelock\",\"type\":\"uint64\"},{\"internalType\":\"enum CBridge.TransferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirm(bytes32,bytes32)\":{\"details\":\"confirm a transfer.\",\"params\":{\"_preimage\":\"key for the hashlock\",\"_transferId\":\"Id of pending transfer.\"}},\"refund(bytes32)\":{\"details\":\"refund a transfer after timeout.\",\"params\":{\"_transferId\":\"Id of pending transfer.\"}},\"transferIn(address,address,uint256,bytes32,uint64,uint64,bytes32)\":{\"details\":\"transfer sets up a new inbound transfer with hash time lock.\"},\"transferOut(address,address,uint256,bytes32,uint64,uint64,address)\":{\"details\":\"transfer sets up a new outbound transfer with hash time lock.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CBridge.sol\":\"CBridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/CBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract CBridge {\\n    using SafeERC20 for IERC20;\\n\\n    enum TransferStatus {\\n        Null,\\n        Pending,\\n        Confirmed,\\n        Refunded\\n    }\\n    struct Transfer {\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        bytes32 hashlock; // hash of the preimage\\n        uint64 timelock; // UNIX timestamp seconds - locked UNTIL this time\\n        TransferStatus status;\\n    }\\n\\n    mapping(bytes32 => Transfer) public transfers;\\n\\n    event LogNewTransferOut(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes32 hashlock, // hash of the preimage\\n        uint64 timelock, // UNIX timestamp seconds - locked UNTIL this time\\n        uint64 dstChainId,\\n        address dstAddress\\n    );\\n    event LogNewTransferIn(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes32 hashlock, // hash of the preimage\\n        uint64 timelock, // UNIX timestamp seconds - locked UNTIL this time\\n        uint64 srcChainId,\\n        bytes32 srcTransferId // outbound transferId at src chain\\n    );\\n    event LogTransferConfirmed(bytes32 transferId, bytes32 preimage);\\n    event LogTransferRefunded(bytes32 transferId);\\n\\n    /**\\n     * @dev transfer sets up a new outbound transfer with hash time lock.\\n     */\\n    function transferOut(\\n        address _bridge,\\n        address _token,\\n        uint256 _amount,\\n        bytes32 _hashlock,\\n        uint64 _timelock,\\n        uint64 _dstChainId,\\n        address _dstAddress\\n    ) external {\\n        bytes32 transferId = _transfer(_bridge, _token, _amount, _hashlock, _timelock);\\n        emit LogNewTransferOut(\\n            transferId,\\n            msg.sender,\\n            _bridge,\\n            _token,\\n            _amount,\\n            _hashlock,\\n            _timelock,\\n            _dstChainId,\\n            _dstAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev transfer sets up a new inbound transfer with hash time lock.\\n     */\\n    function transferIn(\\n        address _dstAddress,\\n        address _token,\\n        uint256 _amount,\\n        bytes32 _hashlock,\\n        uint64 _timelock,\\n        uint64 _srcChainId,\\n        bytes32 _srcTransferId\\n    ) external {\\n        bytes32 transferId = _transfer(_dstAddress, _token, _amount, _hashlock, _timelock);\\n        emit LogNewTransferIn(\\n            transferId,\\n            msg.sender,\\n            _dstAddress,\\n            _token,\\n            _amount,\\n            _hashlock,\\n            _timelock,\\n            _srcChainId,\\n            _srcTransferId\\n        );\\n    }\\n\\n    /**\\n     * @dev confirm a transfer.\\n     *\\n     * @param _transferId Id of pending transfer.\\n     * @param _preimage key for the hashlock\\n     */\\n    function confirm(bytes32 _transferId, bytes32 _preimage) external {\\n        Transfer memory t = transfers[_transferId];\\n\\n        require(t.status == TransferStatus.Pending, \\\"not pending transfer\\\");\\n        require(t.hashlock == keccak256(abi.encodePacked(_preimage)), \\\"incorrect preimage\\\");\\n\\n        transfers[_transferId].status = TransferStatus.Confirmed;\\n\\n        IERC20(t.token).safeTransfer(t.receiver, t.amount);\\n        emit LogTransferConfirmed(_transferId, _preimage);\\n    }\\n\\n    /**\\n     * @dev refund a transfer after timeout.\\n     *\\n     * @param _transferId Id of pending transfer.\\n     */\\n    function refund(bytes32 _transferId) external {\\n        Transfer memory t = transfers[_transferId];\\n\\n        require(t.status == TransferStatus.Pending, \\\"not pending transfer\\\");\\n        require(t.timelock <= block.timestamp, \\\"timelock not yet passed\\\");\\n\\n        transfers[_transferId].status = TransferStatus.Refunded;\\n\\n        IERC20(t.token).safeTransfer(t.sender, t.amount);\\n        emit LogTransferRefunded(_transferId);\\n    }\\n\\n    /**\\n     * @dev transfer sets up a new transfer with hash time lock.\\n     */\\n    function _transfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes32 _hashlock,\\n        uint64 _timelock\\n    ) private returns (bytes32 transferId) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        require(_timelock > block.timestamp, \\\"invalid timelock\\\");\\n\\n        transferId = keccak256(abi.encodePacked(msg.sender, _receiver, _hashlock, block.chainid));\\n        require(transfers[transferId].status == TransferStatus.Null, \\\"transfer exists\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        transfers[transferId] = Transfer(\\n            msg.sender,\\n            _receiver,\\n            _token,\\n            _amount,\\n            _hashlock,\\n            _timelock,\\n            TransferStatus.Pending\\n        );\\n        return transferId;\\n    }\\n}\\n\",\"keccak256\":\"0x1e22a47c5643d9dfc7fa89556ae2f683f822dfe0c5a769f461622718cfc7bc61\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806357f784ba1161005057806357f784ba146101045780637249fbb614610117578063f63eba251461012a57600080fd5b80633c64f04b1461006c57806346b40027146100ef575b600080fd5b6100d361007a366004610e50565b6000602081905290815260409020805460018201546002830154600384015460048501546005909501546001600160a01b03948516959385169490921692909167ffffffffffffffff811690600160401b900460ff1687565b6040516100e69796959493929190610ea5565b60405180910390f35b6101026100fd366004610d49565b61013d565b005b610102610112366004610e68565b6101de565b610102610125366004610e50565b610417565b610102610138366004610dc0565b61062d565b600061014c88888888886106bf565b604080518281523360208201526001600160a01b03808c1692820192909252818a1660608201526080810189905260a0810188905267ffffffffffffffff80881660c0830152861660e08201529084166101008201529091507f2991ed59ec037d5602bdc81fb1f3fec360f9e68fd3c1a4efb49fb3f66a88e02190610120015b60405180910390a15050505050505050565b600082815260208181526040808320815160e08101835281546001600160a01b0390811682526001830154811694820194909452600282015490931691830191909152600380820154606084015260048201546080840152600582015467ffffffffffffffff811660a085015260c0840191600160401b90910460ff169081111561027957634e487b7160e01b600052602160045260246000fd5b600381111561029857634e487b7160e01b600052602160045260246000fd5b905250905060018160c0015160038111156102c357634e487b7160e01b600052602160045260246000fd5b146103155760405162461bcd60e51b815260206004820152601460248201527f6e6f742070656e64696e67207472616e7366657200000000000000000000000060448201526064015b60405180910390fd5b604080516020810184905201604051602081830303815290604052805190602001208160800151146103895760405162461bcd60e51b815260206004820152601260248201527f696e636f727265637420707265696d6167650000000000000000000000000000604482015260640161030c565b60008381526020818152604091829020600501805468ff00000000000000001916680200000000000000001790558201516060830151918301516103d9926001600160a01b0390911691906109cc565b60408051848152602081018490527fb7ae890c7a4721f7ed769dabfeee74f0e0f5bcdaad9cab432ccea4d9fa435b50910160405180910390a1505050565b600081815260208181526040808320815160e08101835281546001600160a01b0390811682526001830154811694820194909452600282015490931691830191909152600380820154606084015260048201546080840152600582015467ffffffffffffffff811660a085015260c0840191600160401b90910460ff16908111156104b257634e487b7160e01b600052602160045260246000fd5b60038111156104d157634e487b7160e01b600052602160045260246000fd5b905250905060018160c0015160038111156104fc57634e487b7160e01b600052602160045260246000fd5b146105495760405162461bcd60e51b815260206004820152601460248201527f6e6f742070656e64696e67207472616e73666572000000000000000000000000604482015260640161030c565b428160a0015167ffffffffffffffff1611156105a75760405162461bcd60e51b815260206004820152601760248201527f74696d656c6f636b206e6f742079657420706173736564000000000000000000604482015260640161030c565b60008281526020819052604090819020600501805468ff000000000000000019166803000000000000000017905581516060830151918301516105f6926001600160a01b0390911691906109cc565b6040518281527f70a8f332cabb778f79acc5b97cbb4543970a2f1a34bd0773e4b3012931f752dc9060200160405180910390a15050565b600061063c88888888886106bf565b604080518281523360208201526001600160a01b03808c169282019290925290891660608201526080810188905260a0810187905267ffffffffffffffff80871660c0830152851660e082015261010081018490529091507f252a438c8e02dde6c26723283b3c95b1bf2550b882734770523f1d6767636f9c90610120016101cc565b60008084116107105760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161030c565b428267ffffffffffffffff16116107695760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642074696d656c6f636b00000000000000000000000000000000604482015260640161030c565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288901b1660348201526048810184905246606882015260880160408051601f198184030181529190528051602090910120905060008082815260208190526040902060050154600160401b900460ff1660038111156107f657634e487b7160e01b600052602160045260246000fd5b146108435760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206578697374730000000000000000000000000000000000604482015260640161030c565b6108586001600160a01b038616333087610a61565b6040518060e00160405280336001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018581526020018481526020018367ffffffffffffffff168152602001600160038111156108cd57634e487b7160e01b600052602160045260246000fd5b905260008281526020818152604091829020835181546001600160a01b039182167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617835592850151600183018054918316918516919091179055928401516002820180549190941692169190911790915560608201516003808301919091556080830151600483015560a083015160058301805467ffffffffffffffff90921667ffffffffffffffff1983168117825560c086015193919268ffffffffffffffffff19161790600160401b9084908111156109bc57634e487b7160e01b600052602160045260246000fd5b0217905550505095945050505050565b6040516001600160a01b038316602482015260448101829052610a5c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a9f565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a999085906323b872dd60e01b906084016109f8565b50505050565b6000610af4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b849092919063ffffffff16565b805190915015610a5c5780806020019051810190610b129190610e30565b610a5c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161030c565b6060610b938484600085610b9d565b90505b9392505050565b606082471015610c155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161030c565b843b610c635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030c565b600080866001600160a01b03168587604051610c7f9190610e89565b60006040518083038185875af1925050503d8060008114610cbc576040519150601f19603f3d011682016040523d82523d6000602084013e610cc1565b606091505b5091509150610cd1828286610cdc565b979650505050505050565b60608315610ceb575081610b96565b825115610cfb5782518084602001fd5b8160405162461bcd60e51b815260040161030c9190610f13565b80356001600160a01b0381168114610d2c57600080fd5b919050565b803567ffffffffffffffff81168114610d2c57600080fd5b600080600080600080600060e0888a031215610d63578283fd5b610d6c88610d15565b9650610d7a60208901610d15565b95506040880135945060608801359350610d9660808901610d31565b9250610da460a08901610d31565b9150610db260c08901610d15565b905092959891949750929550565b600080600080600080600060e0888a031215610dda578283fd5b610de388610d15565b9650610df160208901610d15565b95506040880135945060608801359350610e0d60808901610d31565b9250610e1b60a08901610d31565b915060c0880135905092959891949750929550565b600060208284031215610e41578081fd5b81518015158114610b96578182fd5b600060208284031215610e61578081fd5b5035919050565b60008060408385031215610e7a578182fd5b50508035926020909101359150565b60008251610e9b818460208701610f46565b9190910192915050565b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905267ffffffffffffffff831660a082015260e0810160048310610f0157634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b6020815260008251806020840152610f32816040850160208701610f46565b601f01601f19169190910160400192915050565b60005b83811015610f61578181015183820152602001610f49565b83811115610a99575050600091015256fea26469706673582212207c6bb8d3b950938b88f282f8299fc9ee4e41a473f1d700f3771212c28d6cb5f164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirm(bytes32,bytes32)": {
        "details": "confirm a transfer.",
        "params": {
          "_preimage": "key for the hashlock",
          "_transferId": "Id of pending transfer."
        }
      },
      "refund(bytes32)": {
        "details": "refund a transfer after timeout.",
        "params": {
          "_transferId": "Id of pending transfer."
        }
      },
      "transferIn(address,address,uint256,bytes32,uint64,uint64,bytes32)": {
        "details": "transfer sets up a new inbound transfer with hash time lock."
      },
      "transferOut(address,address,uint256,bytes32,uint64,uint64,address)": {
        "details": "transfer sets up a new outbound transfer with hash time lock."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 631,
        "contract": "contracts/CBridge.sol:CBridge",
        "label": "transfers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Transfer)626_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TransferStatus)610": {
        "encoding": "inplace",
        "label": "enum CBridge.TransferStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Transfer)626_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CBridge.Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(Transfer)626_storage"
      },
      "t_struct(Transfer)626_storage": {
        "encoding": "inplace",
        "label": "struct CBridge.Transfer",
        "members": [
          {
            "astId": 612,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 614,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 616,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 618,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 620,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "hashlock",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 622,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "timelock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 625,
            "contract": "contracts/CBridge.sol:CBridge",
            "label": "status",
            "offset": 8,
            "slot": "5",
            "type": "t_enum(TransferStatus)610"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}